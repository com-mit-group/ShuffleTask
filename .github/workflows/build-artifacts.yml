name: Build Artifacts

on:
  workflow_dispatch:
    inputs:
      version:
        description: 'Semantic version (e.g., 1.0.0). Leave empty to auto-generate from GitVersion.'
        type: string
        required: false
  push:
    tags:
      - '[0-9]+.[0-9]+.[0-9]+'

jobs:
  build:
    runs-on: windows-latest
    outputs:
      version: ${{ steps.set-version.outputs.version }}
      build-status: ${{ steps.build-status.outputs.status }}
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Determine version
        id: determine-version
        run: |
          if ("${{ github.event.inputs.version }}" -ne "") {
            $version = "${{ github.event.inputs.version }}"
            Write-Host "Using manual version: $version"
          } elseif ("${{ github.ref_type }}" -eq "tag") {
            $version = "${{ github.ref_name }}"
            Write-Host "Using tag version: $version"
          } else {
            Write-Host "No version provided, will use GitVersion"
            $version = ""
          }
          echo "manual_version=$version" >> $env:GITHUB_OUTPUT
        shell: pwsh

      - name: Install GitVersion
        if: steps.determine-version.outputs.manual_version == ''
        uses: gittools/actions/gitversion/setup@v1.1.1
        with:
          versionSpec: '5.x'
          preferLatestVersion: true

      - name: Execute GitVersion
        id: gitversion
        if: steps.determine-version.outputs.manual_version == ''
        uses: gittools/actions/gitversion/execute@v1.1.1
        with:
          useConfigFile: true
          configFilePath: '.github/GitVersion.yaml'

      - name: Set final version
        id: set-version
        run: |
          $manualVersion = "${{ steps.determine-version.outputs.manual_version }}"
          if ($manualVersion -ne "") {
            $finalVersion = $manualVersion
          } else {
            $finalVersion = "${{ steps.gitversion.outputs.majorMinorPatch }}"
          }
          Write-Host "Final version: $finalVersion"
          echo "version=$finalVersion" >> $env:GITHUB_OUTPUT
          # Create version file for artifact metadata
          New-Item -ItemType Directory -Force -Path ./artifacts
          echo $finalVersion > ./artifacts/VERSION.txt
        shell: pwsh

      - name: Check if build already exists
        id: check-build
        run: |
          $version = "${{ steps.set-version.outputs.version }}"
          Write-Host "Checking for existing build artifacts for version: $version"
          
          # Check if artifacts already exist in releases
          $releases = gh release list --limit 100 --json tagName,name | ConvertFrom-Json
          $buildRelease = $releases | Where-Object { $_.tagName -eq "build-$version" -or $_.name -eq "build-$version" }
          
          if ($buildRelease) {
            Write-Host "✓ Build artifacts already exist for version $version"
            echo "exists=true" >> $env:GITHUB_OUTPUT
            echo "status=skipped" >> $env:GITHUB_OUTPUT
          } else {
            Write-Host "No existing build found, proceeding with build"
            echo "exists=false" >> $env:GITHUB_OUTPUT
            echo "status=new" >> $env:GITHUB_OUTPUT
          }
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        shell: pwsh

      - name: Set up .NET 8 SDK
        if: steps.check-build.outputs.exists == 'false'
        uses: actions/setup-dotnet@v3
        with:
          dotnet-version: 8.0.x

      - name: Install MAUI workload
        if: steps.check-build.outputs.exists == 'false'
        run: dotnet workload install maui --skip-manifest-update

      - name: Restore dependencies
        if: steps.check-build.outputs.exists == 'false'
        run: dotnet restore ShuffleTask.sln

      - name: Build Windows self-contained executable
        if: steps.check-build.outputs.exists == 'false'
        run: >-
          dotnet publish ShuffleTask.Presentation/ShuffleTask.Presentation.csproj
          -c Release
          -r win-x64
          --self-contained true
          -f net8.0-windows10.0.19041.0
          -o ./artifacts/win
          /p:Version=${{ steps.set-version.outputs.version }}
          /p:AssemblyVersion=${{ steps.set-version.outputs.version }}

      - name: Build Android APK
        if: steps.check-build.outputs.exists == 'false'
        run: >-
          dotnet publish ShuffleTask.Presentation/ShuffleTask.Presentation.csproj
          -c Release
          -f net8.0-android
          /p:AndroidPackageFormat=apk
          /p:Version=${{ steps.set-version.outputs.version }}
          /p:ApplicationVersion=${{ steps.set-version.outputs.version }}
          -o ./artifacts/android

      - name: Normalize artifact names
        if: steps.check-build.outputs.exists == 'false'
        shell: pwsh
        run: |
          $version = "${{ steps.set-version.outputs.version }}"
          
          $winOutput = Get-ChildItem 'artifacts/win' -Filter *.exe | Sort-Object LastWriteTime -Descending | Select-Object -First 1
          if (-not $winOutput) { throw 'Windows publish output missing expected .exe file.' }
          $winName = "ShuffleTask-$version-unsigned.exe"
          Rename-Item -Path $winOutput.FullName -NewName $winName -Force
          Write-Host "Renamed Windows artifact to: $winName"
          
          $apkOutput = Get-ChildItem 'artifacts/android' -Filter *.apk | Sort-Object LastWriteTime -Descending | Select-Object -First 1
          if (-not $apkOutput) { throw 'Android publish output missing expected .apk file.' }
          $apkName = "ShuffleTask-$version-unsigned.apk"
          Rename-Item -Path $apkOutput.FullName -NewName $apkName -Force
          Write-Host "Renamed Android artifact to: $apkName"

      - name: Mark build status as success
        id: build-status
        if: steps.check-build.outputs.exists == 'false'
        run: |
          echo "status=success" >> $env:GITHUB_OUTPUT
        shell: pwsh

      - name: Create build release for artifact storage
        if: steps.check-build.outputs.exists == 'false'
        run: |
          $version = "${{ steps.set-version.outputs.version }}"
          Write-Host "Creating build release for version: $version"
          
          gh release create "build-$version" `
            --title "Build Artifacts v$version" `
            --notes "Unsigned build artifacts for version $version. Created: $(Get-Date -Format 'yyyy-MM-dd HH:mm:ss UTC')" `
            --prerelease `
            ./artifacts/VERSION.txt `
            ./artifacts/win/*.exe `
            ./artifacts/android/*.apk
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        shell: pwsh

      - name: Skip message
        if: steps.check-build.outputs.exists == 'true'
        run: |
          Write-Host "================================================"
          Write-Host "Build artifacts already exist for version ${{ steps.set-version.outputs.version }}"
          Write-Host "Skipping build. To rebuild, delete the build-${{ steps.set-version.outputs.version }} release first."
          Write-Host "================================================"
        shell: pwsh

  summary:
    runs-on: ubuntu-latest
    needs: build
    if: always()
    steps:
      - name: Build summary
        run: |
          echo "## Build Pipeline Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Version:** ${{ needs.build.outputs.version }}" >> $GITHUB_STEP_SUMMARY
          echo "**Status:** ${{ needs.build.outputs.build-status }}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          if [ "${{ needs.build.outputs.build-status }}" == "skipped" ]; then
            echo "✓ Build artifacts already exist for this version." >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "To rebuild, delete the \`build-${{ needs.build.outputs.version }}\` release first." >> $GITHUB_STEP_SUMMARY
          elif [ "${{ needs.build.outputs.build-status }}" == "success" ]; then
            echo "✓ Build completed successfully." >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "Artifacts have been uploaded to release \`build-${{ needs.build.outputs.version }}\`" >> $GITHUB_STEP_SUMMARY
          else
            echo "✗ Build status unknown or failed." >> $GITHUB_STEP_SUMMARY
          fi
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### Next Steps" >> $GITHUB_STEP_SUMMARY
          echo "Run the **Sign Artifacts** workflow with version: \`${{ needs.build.outputs.version }}\`" >> $GITHUB_STEP_SUMMARY
