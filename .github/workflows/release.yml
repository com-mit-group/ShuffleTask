name: Release

on:
  workflow_dispatch:
    inputs:
      version:
        description: 'Semantic version to release (e.g., 1.0.0)'
        type: string
        required: true
      notes:
        description: 'Release notes (optional)'
        type: string
        required: false

jobs:
  release:
    runs-on: ubuntu-latest
    outputs:
      version: ${{ github.event.inputs.version }}
      release-status: ${{ steps.release-status.outputs.status }}

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Validate version input
        run: |
          VERSION="${{ github.event.inputs.version }}"
          if [ -z "$VERSION" ]; then
            echo "✗ Version is required. Please provide a semantic version (e.g., 1.0.0)"
            exit 1
          fi
          echo "Processing version: $VERSION"

      - name: Check if release already exists
        id: check-release
        run: |
          VERSION="${{ github.event.inputs.version }}"
          echo "Checking for existing release for version: $VERSION"

          if gh release view "$VERSION" &>/dev/null; then
            echo "✓ Release already exists for version $VERSION"
            echo "exists=true" >> $GITHUB_OUTPUT
          else
            echo "No existing release found"
            echo "exists=false" >> $GITHUB_OUTPUT
          fi
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Check if signed artifacts exist
        if: steps.check-release.outputs.exists == 'false'
        id: check-signed
        shell: pwsh
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          $repo = "${{ github.repository }}"
          $version = "${{ github.event.inputs.version }}"
          $expected = @(
            "signed-$version-windows",
            "signed-$version-android",
            "signed-$version-metadata"
          )

          $response = gh api "repos/$repo/actions/artifacts?per_page=100" | ConvertFrom-Json
          $artifacts = @()
          if ($null -ne $response.artifacts) { $artifacts = $response.artifacts }

          $existing = $artifacts | Where-Object { $_.name -in $expected -and $_.expired -eq $false } | Select-Object -ExpandProperty name -Unique

          if ($existing.Count -lt $expected.Count) {
            Write-Host "✗ Signed artifacts not found for version $version"
            Write-Host "Ensure the Sign Artifacts workflow has been completed for this version."
            throw "Signed artifacts missing."
          }

          Write-Host "✓ Signed artifacts found for version $version"

      - name: Download signed artifacts
        if: steps.check-release.outputs.exists == 'false'
        shell: pwsh
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          $repo = "${{ github.repository }}"
          $version = "${{ github.event.inputs.version }}"
          $windowsName = "signed-$version-windows"
          $androidName = "signed-$version-android"
          $metadataName = "signed-$version-metadata"

          $response = gh api "repos/$repo/actions/artifacts?per_page=100" | ConvertFrom-Json
          $artifacts = @()
          if ($null -ne $response.artifacts) { $artifacts = $response.artifacts }

          $windowsArtifact = $artifacts | Where-Object { $_.name -eq $windowsName -and $_.expired -eq $false } | Select-Object -First 1
          $androidArtifact = $artifacts | Where-Object { $_.name -eq $androidName -and $_.expired -eq $false } | Select-Object -First 1
          $metadataArtifact = $artifacts | Where-Object { $_.name -eq $metadataName -and $_.expired -eq $false } | Select-Object -First 1

          if (-not $windowsArtifact) { throw "Signed Windows artifact $windowsName not found." }
          if (-not $androidArtifact) { throw "Signed Android artifact $androidName not found." }
          if (-not $metadataArtifact) { throw "Metadata artifact $metadataName not found." }

          New-Item -ItemType Directory -Force -Path ./release-artifacts | Out-Null

          $winZip = Join-Path (Get-Location) 'signed-windows.zip'
          $androidZip = Join-Path (Get-Location) 'signed-android.zip'
          $metadataZip = Join-Path (Get-Location) 'signed-metadata.zip'

          gh api --method GET --header "Accept: application/octet-stream" $windowsArtifact.archive_download_url --output $winZip
          gh api --method GET --header "Accept: application/octet-stream" $androidArtifact.archive_download_url --output $androidZip
          gh api --method GET --header "Accept: application/octet-stream" $metadataArtifact.archive_download_url --output $metadataZip

          Expand-Archive -Path $winZip -DestinationPath ./release-artifacts -Force
          Expand-Archive -Path $androidZip -DestinationPath ./release-artifacts -Force
          Expand-Archive -Path $metadataZip -DestinationPath ./release-artifacts -Force

          Remove-Item $winZip, $androidZip, $metadataZip -Force

          Get-ChildItem -Path ./release-artifacts

      - name: Create release notes
        if: steps.check-release.outputs.exists == 'false'
        id: release-notes
        run: |
          VERSION="${{ github.event.inputs.version }}"
          USER_NOTES="${{ github.event.inputs.notes }}"

          cat > release-notes.md << EOF
          # ShuffleTask v$VERSION

          $USER_NOTES

          ## Installation

          ### Windows
          Download \`ShuffleTask-$VERSION.exe\` and run it. No installation required.

          ### Android
          Download \`ShuffleTask-$VERSION.apk\` and install it on your Android device. You may need to enable "Install from unknown sources" in your device settings.

          ## What's Changed

          See the [full changelog](https://github.com/yaron-E92/ShuffleTask/compare/v$VERSION...main) for details.

          ---

          *Built on $(date -u '+%Y-%m-%d %H:%M:%S UTC')*
          EOF

          echo "Release notes created"

      - name: Create GitHub Release
        if: steps.check-release.outputs.exists == 'false'
        run: |
          VERSION="${{ github.event.inputs.version }}"
          echo "Creating GitHub release for version: $VERSION"

          gh release create "$VERSION" \
            --title "ShuffleTask v$VERSION" \
            --notes-file release-notes.md \
            ./release-artifacts/*.exe \
            ./release-artifacts/*.apk \
            ./release-artifacts/VERSION.txt

          echo "✓ Release created successfully"
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Mark release status
        id: release-status
        if: always()
        run: |
          if [ "${{ job.status }}" != "success" ]; then
            echo "status=failed" >> $GITHUB_OUTPUT
          elif [ "${{ steps.check-release.outputs.exists }}" = "true" ]; then
            echo "status=skipped" >> $GITHUB_OUTPUT
          else
            echo "status=success" >> $GITHUB_OUTPUT
          fi

      - name: Skip message
        if: steps.check-release.outputs.exists == 'true'
        run: |
          echo "================================================"
          echo "Release already exists for version ${{ github.event.inputs.version }}"
          echo "Skipping release creation."
          echo "To create a new release, use a different version number."
          echo "================================================"

  summary:
    runs-on: ubuntu-latest
    needs: release
    if: always()
    steps:
      - name: Release summary
        run: |
          echo "## Release Pipeline Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Version:** ${{ needs.release.outputs.version }}" >> $GITHUB_STEP_SUMMARY
          echo "**Status:** ${{ needs.release.outputs.release-status }}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          if [ "${{ needs.release.outputs.release-status }}" == "success" ]; then
            echo "✓ Release created successfully." >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "**Release URL:** https://github.com/yaron-E92/ShuffleTask/releases/tag/${{ needs.release.outputs.version }}" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "The release is now public and available for download." >> $GITHUB_STEP_SUMMARY
          elif [ "${{ needs.release.outputs.release-status }}" == "skipped" ]; then
            echo "✓ Release already exists for this version." >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "**Release URL:** https://github.com/yaron-E92/ShuffleTask/releases/tag/${{ needs.release.outputs.version }}" >> $GITHUB_STEP_SUMMARY
          else
            echo "✗ Release failed or status unknown." >> $GITHUB_STEP_SUMMARY
          fi
