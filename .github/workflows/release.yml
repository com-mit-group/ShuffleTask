name: Release

on:
  workflow_dispatch:
    inputs:
      version:
        description: 'Semantic version to release (e.g., 1.0.0)'
        type: string
        required: true
      notes:
        description: 'Release notes (optional)'
        type: string
        required: false

jobs:
  release:
    runs-on: ubuntu-latest
    outputs:
      version: ${{ github.event.inputs.version }}
      release-status: ${{ steps.release-status.outputs.status }}
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Validate version input
        run: |
          VERSION="${{ github.event.inputs.version }}"
          if [ -z "$VERSION" ]; then
            echo "✗ Version is required. Please provide a semantic version (e.g., 1.0.0)"
            exit 1
          fi
          echo "Processing version: $VERSION"

      - name: Check if release already exists
        id: check-release
        run: |
          VERSION="${{ github.event.inputs.version }}"
          echo "Checking for existing release for version: $VERSION"
          
          # Check if public release already exists
          if gh release view "$VERSION" &>/dev/null; then
            echo "✓ Release already exists for version $VERSION"
            echo "exists=true" >> $GITHUB_OUTPUT
            exit 0
          fi
          
          echo "No existing release found"
          echo "exists=false" >> $GITHUB_OUTPUT
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Check if signed artifacts exist
        if: steps.check-release.outputs.exists == 'false'
        id: check-signed
        run: |
          VERSION="${{ github.event.inputs.version }}"
          echo "Checking for signed artifacts for version: $VERSION"
          
          # Check if signed artifacts exist
          if ! gh release view "signed-$VERSION" &>/dev/null; then
            echo "✗ Signed artifacts not found for version $VERSION"
            echo "Please run the Sign Artifacts workflow first with version $VERSION"
            exit 1
          fi
          
          echo "✓ Signed artifacts found for version $VERSION"
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Download signed artifacts
        if: steps.check-release.outputs.exists == 'false'
        run: |
          VERSION="${{ github.event.inputs.version }}"
          echo "Downloading signed artifacts for version: $VERSION"
          
          # Create artifacts directory
          mkdir -p ./release-artifacts
          
          # Download artifacts from signed release
          gh release download "signed-$VERSION" --pattern "*.exe" --dir ./release-artifacts
          gh release download "signed-$VERSION" --pattern "*.apk" --dir ./release-artifacts
          gh release download "signed-$VERSION" --pattern "VERSION.txt" --dir ./release-artifacts
          
          # Verify artifacts were downloaded
          if [ ! -f ./release-artifacts/*.exe ]; then
            echo "✗ Windows .exe not found in signed artifacts"
            exit 1
          fi
          
          if [ ! -f ./release-artifacts/*.apk ]; then
            echo "✗ Android .apk not found in signed artifacts"
            exit 1
          fi
          
          echo "✓ Downloaded signed artifacts:"
          ls -lh ./release-artifacts/
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Create release notes
        if: steps.check-release.outputs.exists == 'false'
        id: release-notes
        run: |
          VERSION="${{ github.event.inputs.version }}"
          USER_NOTES="${{ github.event.inputs.notes }}"
          
          # Create release notes file
          cat > release-notes.md << EOF
          # ShuffleTask v$VERSION
          
          $USER_NOTES
          
          ## Installation
          
          ### Windows
          Download \`ShuffleTask-$VERSION.exe\` and run it. No installation required.
          
          ### Android
          Download \`ShuffleTask-$VERSION.apk\` and install it on your Android device. You may need to enable "Install from unknown sources" in your device settings.
          
          ## What's Changed
          
          See the [full changelog](https://github.com/yaron-E92/ShuffleTask/compare/v$VERSION...main) for details.
          
          ---
          
          *Built on $(date -u '+%Y-%m-%d %H:%M:%S UTC')*
          EOF
          
          echo "Release notes created"

      - name: Tag repository
        if: steps.check-release.outputs.exists == 'false'
        run: |
          VERSION="${{ github.event.inputs.version }}"
          
          # Configure git
          git config user.name "GitHub Actions"
          git config user.email "actions@github.com"
          
          # Check if tag already exists
          if git rev-parse "v$VERSION" >/dev/null 2>&1; then
            echo "Tag v$VERSION already exists"
          else
            echo "Creating tag v$VERSION"
            git tag -a "v$VERSION" -m "Release version $VERSION"
            git push origin "v$VERSION"
            echo "✓ Tag v$VERSION created and pushed"
          fi

      - name: Create GitHub Release
        if: steps.check-release.outputs.exists == 'false'
        run: |
          VERSION="${{ github.event.inputs.version }}"
          echo "Creating GitHub release for version: $VERSION"
          
          # Create the release with signed artifacts
          gh release create "$VERSION" \
            --title "ShuffleTask v$VERSION" \
            --notes-file release-notes.md \
            ./release-artifacts/*.exe \
            ./release-artifacts/*.apk
          
          echo "✓ Release created successfully"
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Mark release status as success
        id: release-status
        if: steps.check-release.outputs.exists == 'false'
        run: |
          echo "status=success" >> $GITHUB_OUTPUT

      - name: Clean up pre-release artifacts
        if: steps.check-release.outputs.exists == 'false'
        run: |
          VERSION="${{ github.event.inputs.version }}"
          echo "Cleaning up intermediate releases..."
          
          # Delete build and signed pre-releases (optional, can be kept for debugging)
          if gh release view "build-$VERSION" &>/dev/null; then
            echo "Deleting build-$VERSION pre-release..."
            gh release delete "build-$VERSION" --yes --cleanup-tag
          fi
          
          if gh release view "signed-$VERSION" &>/dev/null; then
            echo "Deleting signed-$VERSION pre-release..."
            gh release delete "signed-$VERSION" --yes --cleanup-tag
          fi
          
          echo "✓ Cleanup completed"
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        continue-on-error: true

      - name: Skip message
        if: steps.check-release.outputs.exists == 'true'
        run: |
          echo "================================================"
          echo "Release already exists for version ${{ github.event.inputs.version }}"
          echo "Skipping release creation."
          echo "To create a new release, use a different version number."
          echo "================================================"

  summary:
    runs-on: ubuntu-latest
    needs: release
    if: always()
    steps:
      - name: Release summary
        run: |
          echo "## Release Pipeline Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Version:** ${{ needs.release.outputs.version }}" >> $GITHUB_STEP_SUMMARY
          echo "**Status:** ${{ needs.release.outputs.release-status }}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          if [ "${{ needs.release.outputs.release-status }}" == "success" ]; then
            echo "✓ Release created successfully." >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "**Release URL:** https://github.com/yaron-E92/ShuffleTask/releases/tag/${{ needs.release.outputs.version }}" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "The release is now public and available for download." >> $GITHUB_STEP_SUMMARY
          elif [ "${{ needs.release.outputs.release-status }}" == "" ]; then
            echo "✓ Release already exists for this version." >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "**Release URL:** https://github.com/yaron-E92/ShuffleTask/releases/tag/${{ needs.release.outputs.version }}" >> $GITHUB_STEP_SUMMARY
          else
            echo "✗ Release failed or status unknown." >> $GITHUB_STEP_SUMMARY
          fi
