name: Sign Artifacts

on:
  workflow_dispatch:
    inputs:
      version:
        description: 'Semantic version to sign (e.g., 1.0.0)'
        type: string
        required: true

jobs:
  sign:
    runs-on: windows-latest
    outputs:
      version: ${{ github.event.inputs.version }}
      sign-status: ${{ steps.sign-status.outputs.status }}
    env:
      WINDOWS_CERT_PFX_B64: ${{ secrets.WINDOWS_CERT_PFX }}
      WINDOWS_CERT_PASS: ${{ secrets.WINDOWS_CERT_PASS }}
      ANDROID_KEYSTORE_B64: ${{ secrets.ANDROID_KEYSTORE }}
      ANDROID_KEY_PASS: ${{ secrets.ANDROID_KEY_PASS }}
      ANDROID_KEY_ALIAS: ${{ secrets.ANDROID_KEY_ALIAS }}
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Validate version input
        run: |
          $version = "${{ github.event.inputs.version }}"
          if ([string]::IsNullOrWhiteSpace($version)) {
            throw "Version is required. Please provide a semantic version (e.g., 1.0.0)"
          }
          Write-Host "Processing version: $version"
        shell: pwsh

      - name: Check if signing already completed
        id: check-signed
        run: |
          $version = "${{ github.event.inputs.version }}"
          Write-Host "Checking for existing signed artifacts for version: $version"
          
          # Check if signed artifacts already exist
          $releases = gh release list --limit 100 --json tagName,name | ConvertFrom-Json
          $signedRelease = $releases | Where-Object { $_.tagName -eq "signed-$version" -or $_.name -eq "signed-$version" }
          
          if ($signedRelease) {
            Write-Host "✓ Signed artifacts already exist for version $version"
            echo "exists=true" >> $env:GITHUB_OUTPUT
            exit 0
          }
          
          Write-Host "No existing signed artifacts found"
          echo "exists=false" >> $env:GITHUB_OUTPUT
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        shell: pwsh

      - name: Check if build exists
        if: steps.check-signed.outputs.exists == 'false'
        id: check-build
        run: |
          $version = "${{ github.event.inputs.version }}"
          Write-Host "Checking for build artifacts for version: $version"
          
          $releases = gh release list --limit 100 --json tagName,name | ConvertFrom-Json
          $buildRelease = $releases | Where-Object { $_.tagName -eq "build-$version" -or $_.name -eq "build-$version" }
          
          if (-not $buildRelease) {
            Write-Host "✗ Build artifacts not found for version $version"
            Write-Host "Please run the Build Artifacts workflow first with version $version"
            throw "Build artifacts not found. Cannot proceed with signing."
          }
          
          Write-Host "✓ Build artifacts found for version $version"
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        shell: pwsh

      - name: Download build artifacts
        if: steps.check-signed.outputs.exists == 'false'
        run: |
          $version = "${{ github.event.inputs.version }}"
          Write-Host "Downloading build artifacts for version: $version"
          
          # Create artifacts directory
          New-Item -ItemType Directory -Force -Path ./artifacts/win
          New-Item -ItemType Directory -Force -Path ./artifacts/android
          
          # Download artifacts from build release
          gh release download "build-$version" --pattern "*.exe" --dir ./artifacts/win
          gh release download "build-$version" --pattern "*.apk" --dir ./artifacts/android
          gh release download "build-$version" --pattern "VERSION.txt" --dir ./artifacts
          
          # Verify artifacts were downloaded
          $winExe = Get-ChildItem ./artifacts/win -Filter *.exe | Select-Object -First 1
          $androidApk = Get-ChildItem ./artifacts/android -Filter *.apk | Select-Object -First 1
          
          if (-not $winExe) { throw "Windows .exe not found in downloaded artifacts" }
          if (-not $androidApk) { throw "Android .apk not found in downloaded artifacts" }
          
          Write-Host "✓ Downloaded artifacts:"
          Write-Host "  Windows: $($winExe.Name)"
          Write-Host "  Android: $($androidApk.Name)"
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        shell: pwsh

      - name: Validate signing prerequisites
        if: steps.check-signed.outputs.exists == 'false'
        shell: pwsh
        run: |
          if ([string]::IsNullOrWhiteSpace($env:WINDOWS_CERT_PFX_B64) -or [string]::IsNullOrWhiteSpace($env:WINDOWS_CERT_PASS)) {
            throw "Windows signing secrets missing. Once you obtain your Authenticode .pfx file, base64-encode it and store it as WINDOWS_CERT_PFX, with the password in WINDOWS_CERT_PASS."
          }
          if ([string]::IsNullOrWhiteSpace($env:ANDROID_KEYSTORE_B64) -or [string]::IsNullOrWhiteSpace($env:ANDROID_KEY_PASS)) {
            throw "Android signing secrets missing. After generating your keystore (.jks/.keystore), base64-encode it into ANDROID_KEYSTORE and place the password in ANDROID_KEY_PASS."
          }
          Write-Host "✓ Signing prerequisites validated"

      - name: Prepare Windows signing certificate
        if: steps.check-signed.outputs.exists == 'false'
        shell: pwsh
        run: |
          $certPath = Join-Path $env:RUNNER_TEMP 'windows-signing-cert.pfx'
          [IO.File]::WriteAllBytes($certPath, [Convert]::FromBase64String($env:WINDOWS_CERT_PFX_B64))
          "WINDOWS_CERT_PATH=$certPath" | Out-File -FilePath $env:GITHUB_ENV -Encoding utf8 -Append
          Write-Host "✓ Windows certificate prepared"

      - name: Prepare Android keystore
        if: steps.check-signed.outputs.exists == 'false'
        shell: pwsh
        run: |
          $keystorePath = Join-Path $env:RUNNER_TEMP 'android-signing-key.jks'
          [IO.File]::WriteAllBytes($keystorePath, [Convert]::FromBase64String($env:ANDROID_KEYSTORE_B64))
          "ANDROID_KEYSTORE_PATH=$keystorePath" | Out-File -FilePath $env:GITHUB_ENV -Encoding utf8 -Append
          Write-Host "✓ Android keystore prepared"

      - name: Ensure signtool is available
        if: steps.check-signed.outputs.exists == 'false'
        shell: pwsh
        run: |
          $signtool = Get-Command signtool.exe -ErrorAction SilentlyContinue
          if (-not $signtool) {
            Write-Host "signtool.exe not found. Attempting to add Windows SDK signtool to PATH..."
            $sdkDirs = Get-ChildItem 'C:\Program Files (x86)\Windows Kits\10\bin' -Directory -ErrorAction SilentlyContinue
            $signtoolPath = $null
            foreach ($sdkDir in $sdkDirs) {
              $possible = Join-Path $sdkDir.FullName 'x64\signtool.exe'
              if (Test-Path $possible) {
                $signtoolPath = Split-Path $possible -Parent
                break
              }
            }
            if ($signtoolPath) {
              echo $signtoolPath | Out-File -FilePath $env:GITHUB_PATH -Encoding utf8 -Append
              Write-Host "✓ Added $signtoolPath to PATH"
            } else {
              throw "signtool.exe could not be found or installed automatically."
            }
          } else {
            Write-Host "✓ signtool.exe found: $($signtool.Source)"
          }

      - name: Sign Windows executable
        if: steps.check-signed.outputs.exists == 'false'
        shell: pwsh
        run: |
          $version = "${{ github.event.inputs.version }}"
          $exeFile = Get-ChildItem ./artifacts/win -Filter *.exe | Select-Object -First 1
          
          Write-Host "Signing Windows executable: $($exeFile.Name)"
          
          signtool sign `
            /f "$env:WINDOWS_CERT_PATH" `
            /p "$env:WINDOWS_CERT_PASS" `
            /tr http://timestamp.digicert.com `
            /td sha256 `
            /fd sha256 `
            $exeFile.FullName
          
          if ($LASTEXITCODE -ne 0) {
            throw "Windows signing failed with exit code $LASTEXITCODE"
          }
          
          # Rename to signed version
          $signedName = "ShuffleTask-$version.exe"
          Rename-Item -Path $exeFile.FullName -NewName $signedName -Force
          Write-Host "✓ Signed and renamed to: $signedName"

      - name: Align and sign Android APK
        if: steps.check-signed.outputs.exists == 'false'
        shell: pwsh
        run: |
          $version = "${{ github.event.inputs.version }}"
          $apkFile = Get-ChildItem ./artifacts/android -Filter *.apk | Select-Object -First 1
          $apkPath = $apkFile.FullName
          $apkDirectory = Split-Path $apkPath -Parent
          
          Write-Host "Processing Android APK: $($apkFile.Name)"
          
          $androidSdkRoot = if ($env:ANDROID_SDK_ROOT) { $env:ANDROID_SDK_ROOT } elseif ($env:ANDROID_HOME) { $env:ANDROID_HOME } else { $null }
          if (-not $androidSdkRoot) { throw 'ANDROID_SDK_ROOT/ANDROID_HOME environment variable is not set.' }

          $buildToolsDir = Get-ChildItem -Path (Join-Path $androidSdkRoot 'build-tools') -Directory | Sort-Object Name -Descending | Select-Object -First 1
          if (-not $buildToolsDir) { throw 'Android SDK build-tools directory could not be located.' }

          $zipalignPath = Join-Path $buildToolsDir.FullName 'zipalign.exe'
          if (-not (Test-Path $zipalignPath)) { throw "zipalign tool not found at $zipalignPath" }

          $alignedApkPath = Join-Path $apkDirectory 'ShuffleTask-aligned.apk'
          & $zipalignPath -f -p 4 $apkPath $alignedApkPath
          if ($LASTEXITCODE -ne 0) { throw "zipalign failed with exit code $LASTEXITCODE" }
          Move-Item $alignedApkPath $apkPath -Force

          $apksignerPath = Join-Path $buildToolsDir.FullName 'apksigner.bat'
          if (-not (Test-Path $apksignerPath)) { throw "apksigner tool not found at $apksignerPath" }

          $alias = if ($env:ANDROID_KEY_ALIAS) { $env:ANDROID_KEY_ALIAS } else { 'android' }
          $storePassFile = Join-Path $env:RUNNER_TEMP 'storepass.txt'
          Set-Content -Path $storePassFile -Value $env:ANDROID_KEY_PASS -NoNewline

          Write-Host "Signing Android APK..."
          & $apksignerPath sign --ks "$env:ANDROID_KEYSTORE_PATH" --ks-pass "file:$storePassFile" --key-pass "file:$storePassFile" --ks-key-alias $alias $apkPath
          if ($LASTEXITCODE -ne 0) { throw "apksigner failed with exit code $LASTEXITCODE" }

          Write-Host "Verifying signature..."
          & $apksignerPath verify --print-certs $apkPath
          Remove-Item $storePassFile -Force
          
          # Rename to signed version
          $signedName = "ShuffleTask-$version.apk"
          Rename-Item -Path $apkPath -NewName $signedName -Force
          Write-Host "✓ Signed and renamed to: $signedName"

      - name: Mark signing status as success
        id: sign-status
        if: steps.check-signed.outputs.exists == 'false'
        run: |
          echo "status=success" >> $env:GITHUB_OUTPUT
        shell: pwsh

      - name: Create signed release for artifact storage
        if: steps.check-signed.outputs.exists == 'false'
        run: |
          $version = "${{ github.event.inputs.version }}"
          Write-Host "Creating signed release for version: $version"
          
          gh release create "signed-$version" `
            --title "Signed Artifacts v$version" `
            --notes "Signed artifacts for version $version. Created: $(Get-Date -Format 'yyyy-MM-dd HH:mm:ss UTC')" `
            --prerelease `
            ./artifacts/VERSION.txt `
            ./artifacts/win/*.exe `
            ./artifacts/android/*.apk
          
          Write-Host "✓ Signed artifacts uploaded to release signed-$version"
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        shell: pwsh

      - name: Skip message
        if: steps.check-signed.outputs.exists == 'true'
        run: |
          Write-Host "================================================"
          Write-Host "Signed artifacts already exist for version ${{ github.event.inputs.version }}"
          Write-Host "Skipping signing. To re-sign, delete the signed-${{ github.event.inputs.version }} release first."
          Write-Host "================================================"
        shell: pwsh

  summary:
    runs-on: ubuntu-latest
    needs: sign
    if: always()
    steps:
      - name: Sign summary
        run: |
          echo "## Sign Pipeline Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Version:** ${{ needs.sign.outputs.version }}" >> $GITHUB_STEP_SUMMARY
          echo "**Status:** ${{ needs.sign.outputs.sign-status }}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          if [ "${{ needs.sign.outputs.sign-status }}" == "success" ]; then
            echo "✓ Signing completed successfully." >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "Signed artifacts have been uploaded to release \`signed-${{ needs.sign.outputs.version }}\`" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "### Next Steps" >> $GITHUB_STEP_SUMMARY
            echo "Run the **Release** workflow with version: \`${{ needs.sign.outputs.version }}\`" >> $GITHUB_STEP_SUMMARY
          elif [ "${{ needs.sign.outputs.sign-status }}" == "" ]; then
            echo "✓ Signed artifacts already exist for this version." >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "To re-sign, delete the \`signed-${{ needs.sign.outputs.version }}\` release first." >> $GITHUB_STEP_SUMMARY
          else
            echo "✗ Signing failed or status unknown." >> $GITHUB_STEP_SUMMARY
          fi
